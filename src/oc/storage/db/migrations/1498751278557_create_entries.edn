(ns oc.storage.db.migrations.create-entries
  (:require [rethinkdb.query :as r]
            [oc.lib.db.migrations :as m]
            [oc.storage.config :as c]
            [oc.storage.resources.entry :as entry]))

(defn up [conn]
  
  (println "Creating table: " entry/table-name)
  (println (m/create-table conn c/db-name entry/table-name entry/primary-key))
  (println (m/create-index conn entry/table-name "topic-slug"))
  (println (m/create-index conn entry/table-name "board-uuid"))
  (println (m/create-index conn entry/table-name "org-uuid"))

  (println (m/create-compound-index conn entry/table-name "topic-slug-board-uuid"
              (r/fn [row] [(r/get-field row "topic-slug") (r/get-field row "board-uuid")])))
  
  (println (m/create-compound-index conn entry/table-name "uuid-board-uuid-org-uuid"
              (r/fn [row] [(r/get-field row "uuid")
                           (r/get-field row "board-uuid")
                           (r/get-field row "org-uuid")])))
  
  (println (m/create-compound-index conn entry/table-name "author-id"
              (r/fn [row] (r/distinct
                            (r/map (r/get-field row ["author"])
                              (r/fn [author]
                                (r/get-field author "user-id")))))
              {:multi true}))

  (println (m/create-compound-index conn entry/table-name "slack-thread-channel-id-thread"
              (r/fn [row] [(r/get-field row ["slack-thread" "channel-id"]) (r/get-field row ["slack-thread" "thread"])])))

  true) ; return true on success